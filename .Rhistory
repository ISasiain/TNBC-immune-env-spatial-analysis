]
number_of_clusters <- length(unique(cells_in_clusters$Cluster))
if (plot_clusters) {
label_location <- vector()
for (Clusternumber in seq_len(number_of_clusters)) {
cells_in_Cluster <- cells_in_clusters[cells_in_clusters$Cluster ==
Clusternumber, ]
minX <- min(cells_in_Cluster$Cell.X.Position, na.rm = TRUE)
maxX <- max(cells_in_Cluster$Cell.X.Position, na.rm = TRUE)
minY <- min(cells_in_Cluster$Cell.Y.Position, na.rm = TRUE)
maxY <- max(cells_in_Cluster$Cell.Y.Position, na.rm = TRUE)
averageX <- (minX + maxX)/2
averageY <- (minY + maxY)/2
label_location <- rbind(label_location, c(Clusternumber,
averageX, averageY))
}
label_location <- as.data.frame(label_location)
colnames(label_location) <- c("Cluster", "Xpos", "Ypos")
cluster_colours <- dittoSeq::dittoColors()[seq_len(number_of_clusters)]
q <- ggplot(cells_in_clusters, aes(x = Cell.X.Position,
y = Cell.Y.Position))
q <- q + geom_point(aes(color = Cluster))
q <- q + geom_text(data = label_location, aes(x = Xpos,
y = Ypos, label = Cluster))
q <- q + scale_color_manual(values = cluster_colours)
if (dim(cells_not_in_clusters)[1] != 0) {
q <- q + geom_point(data = cells_not_in_clusters,
colour = "black")
}
q <- q + xlab("Cell.X.Position") + ylab("Cell.Y.Position") +
theme_bw() + theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(), legend.position = "none")
methods::show(q)
}
formatted_data_with_clusters <- formatted_data
formatted_data_with_clusters$Cluster <- paste0("Cluster_",
as.character(formatted_data_with_clusters$Cluster))
formatted_data_with_clusters$Cluster[formatted_data_with_clusters$Cluster ==
"Cluster_NA"] <- "Free_cell"
formatted_data_with_clusters$Cluster[formatted_data_with_clusters$Cluster ==
"Cluster_Free_cell"] <- "Free_cell"
colnames(formatted_data_with_clusters)[which(colnames(formatted_data_with_clusters) ==
"Cluster")] <- "Neighborhood"
if (is.null(SummarizedExperiment::colData(spe_object)$Cell.ID)) {
SummarizedExperiment::colData(spe_object)$Cell.ID <- rownames(SummarizedExperiment::colData(spe_object))
}
SummarizedExperiment::colData(spe_object) <- methods::as(merge(data.frame(SummarizedExperiment::colData(spe_object)),
formatted_data_with_clusters[, c("Cell.ID", "Neighborhood")],
by = "Cell.ID", all.x = TRUE), "DFrame")
return(spe_object)
}
#Identifying cell neighborhoods
clusters <- identify_neighborhoods(A2_B4,
method = "hierarchical",
cell_types_of_interest = c("p53"),
feature_colname = "Cell.Type",
radius = 50,
min_neighborhood_size = 65)
identify_neigh <- function (spe_object, method = "hierarchical", cell_types_of_interest,
radius, min_neighborhood_size = 10, k = 100, feature_colname,
no_pheno = NULL)
{
Cell.X.Position <- Cell.Y.Position <- Cluster <- Xpos <- Ypos <- NULL
plot_clusters <- TRUE
formatted_data <- get_colData(spe_object)
if (!is.null(no_pheno)) {
formatted_data <- formatted_data[formatted_data[, feature_colname] !=
no_pheno, ]
}
if (!is.null(cell_types_of_interest)) {
formatted_data <- formatted_data[formatted_data[, feature_colname] %in%
cell_types_of_interest, ]
}
if (nrow(formatted_data) == 0) {
message("There are no cells in data/no cells for the phenotypes of interest")
formatted_data <- get_colData(spe_object)
formatted_data$Cluster <- NA
plot_clusters <- FALSE
}
else {
if (method == "hierarchical") {
rownames(formatted_data) <- formatted_data$Cell.ID
sim_close <- -apcluster::negDistMat(formatted_data[,
c("Cell.X.Position", "Cell.Y.Position")])
sim_close[sim_close > radius] <- NA
sim_close[sim_close == 0] <- NA
sim_close <- sim_close[apply(sim_close, 1, function(x) {
if (sum(is.na(x)) == length(x)) {
return(FALSE)
}
else {
return(TRUE)
}
}), ]
if (is.null(dim(sim_close))) {
formatted_data$Cluster <- NA
plot_clusters <- FALSE
}
else {
if (nrow(sim_close) == 0) {
formatted_data[formatted_data[[feature_colname]] %in%
cell_types_of_interest, "Cluster"] <- "Free_cell"
plot_clusters <- FALSE
message("There are no clusters detected in this image. All cells of interest are free cells.")
}
else {
sim_close <- sim_close[, apply(sim_close,
2, function(x) {
if (sum(is.na(x)) == length(x)) {
return(FALSE)
}
else {
return(TRUE)
}
})]
cells_in_cluster <- rownames(sim_close)
sim_close <- ifelse(is.na(sim_close), 1, 0)
print(sim_close)
if (nrow(sim_close) != 0 & ncol(sim_close) !=
0) {
h <- stats::hclust(stats::as.dist(sim_close),
method = "single")
local_clusters <- stats::cutree(h, h = 0.5)
formatted_data$Cluster <- as.character(local_clusters[match(formatted_data$Cell.ID,
names(local_clusters))])
}
else {
formatted_data$Cluster <- NA
}
summarised_data <- formatted_data %>% group_by(Cluster) %>%
summarise(n = n())
big_clusters <- summarised_data[summarised_data$n >
min_neighborhood_size, "Cluster"]$Cluster
print(big_clusters)
if (length(big_clusters) == 0) {
formatted_data[formatted_data[[feature_colname]] %in%
cell_types_of_interest, "Cluster"] <- "Free_cell"
plot_clusters <- FALSE
message("There are no clusters detected in this image. All cells of interest are free cells.")
}
else {
formatted_data[formatted_data$Cluster %in%
big_clusters, "size"] <- "larger"
cluster_ids <- unique(formatted_data[formatted_data$size ==
"larger", "Cluster"])
n_cluster <- length(cluster_ids)
n <- 1
for (cluster_id in cluster_ids) {
if (!is.na(cluster_id)) {
formatted_data[which(formatted_data$Cluster ==
cluster_id), "new_cluster"] <- n
n <- n + 1
}
}
formatted_data$Cluster <- formatted_data$new_cluster
formatted_data$Cluster <- as.character(formatted_data$Cluster)
formatted_data$new_cluster <- NULL
formatted_data$size <- NULL
}
}
}
}
else if (method == "dbscan") {
cell_cords <- formatted_data[, c("Cell.X.Position",
"Cell.Y.Position")]
db <- dbscan::dbscan(cell_cords, eps = radius, minPts = min_neighborhood_size)
formatted_data$Cluster <- factor(db$cluster + 1)
}
else if (method == "rphenograph") {
stop("This option is not available for this version yet! Check dev version for this function!")
}
else {
stop("Please select a valid clustering method, current options: dbscan")
}
}
cells_in_clusters <- formatted_data[stats::complete.cases(formatted_data),
]
cells_not_in_clusters <- formatted_data[!stats::complete.cases(formatted_data),
]
number_of_clusters <- length(unique(cells_in_clusters$Cluster))
if (plot_clusters) {
label_location <- vector()
for (Clusternumber in seq_len(number_of_clusters)) {
cells_in_Cluster <- cells_in_clusters[cells_in_clusters$Cluster ==
Clusternumber, ]
minX <- min(cells_in_Cluster$Cell.X.Position, na.rm = TRUE)
maxX <- max(cells_in_Cluster$Cell.X.Position, na.rm = TRUE)
minY <- min(cells_in_Cluster$Cell.Y.Position, na.rm = TRUE)
maxY <- max(cells_in_Cluster$Cell.Y.Position, na.rm = TRUE)
averageX <- (minX + maxX)/2
averageY <- (minY + maxY)/2
label_location <- rbind(label_location, c(Clusternumber,
averageX, averageY))
}
label_location <- as.data.frame(label_location)
colnames(label_location) <- c("Cluster", "Xpos", "Ypos")
cluster_colours <- dittoSeq::dittoColors()[seq_len(number_of_clusters)]
q <- ggplot(cells_in_clusters, aes(x = Cell.X.Position,
y = Cell.Y.Position))
q <- q + geom_point(aes(color = Cluster))
q <- q + geom_text(data = label_location, aes(x = Xpos,
y = Ypos, label = Cluster))
q <- q + scale_color_manual(values = cluster_colours)
if (dim(cells_not_in_clusters)[1] != 0) {
q <- q + geom_point(data = cells_not_in_clusters,
colour = "black")
}
q <- q + xlab("Cell.X.Position") + ylab("Cell.Y.Position") +
theme_bw() + theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(), legend.position = "none")
methods::show(q)
}
formatted_data_with_clusters <- formatted_data
formatted_data_with_clusters$Cluster <- paste0("Cluster_",
as.character(formatted_data_with_clusters$Cluster))
formatted_data_with_clusters$Cluster[formatted_data_with_clusters$Cluster ==
"Cluster_NA"] <- "Free_cell"
formatted_data_with_clusters$Cluster[formatted_data_with_clusters$Cluster ==
"Cluster_Free_cell"] <- "Free_cell"
colnames(formatted_data_with_clusters)[which(colnames(formatted_data_with_clusters) ==
"Cluster")] <- "Neighborhood"
if (is.null(SummarizedExperiment::colData(spe_object)$Cell.ID)) {
SummarizedExperiment::colData(spe_object)$Cell.ID <- rownames(SummarizedExperiment::colData(spe_object))
}
SummarizedExperiment::colData(spe_object) <- methods::as(merge(data.frame(SummarizedExperiment::colData(spe_object)),
formatted_data_with_clusters[, c("Cell.ID", "Neighborhood")],
by = "Cell.ID", all.x = TRUE), "DFrame")
return(spe_object)
}
identify_neigh <- function (spe_object, method = "hierarchical", cell_types_of_interest,
radius, min_neighborhood_size = 10, k = 100, feature_colname,
no_pheno = NULL)
{
Cell.X.Position <- Cell.Y.Position <- Cluster <- Xpos <- Ypos <- NULL
plot_clusters <- TRUE
formatted_data <- get_colData(spe_object)
if (!is.null(no_pheno)) {
formatted_data <- formatted_data[formatted_data[, feature_colname] !=
no_pheno, ]
}
if (!is.null(cell_types_of_interest)) {
formatted_data <- formatted_data[formatted_data[, feature_colname] %in%
cell_types_of_interest, ]
}
if (nrow(formatted_data) == 0) {
message("There are no cells in data/no cells for the phenotypes of interest")
formatted_data <- get_colData(spe_object)
formatted_data$Cluster <- NA
plot_clusters <- FALSE
}
else {
if (method == "hierarchical") {
rownames(formatted_data) <- formatted_data$Cell.ID
sim_close <- -apcluster::negDistMat(formatted_data[,
c("Cell.X.Position", "Cell.Y.Position")])
sim_close[sim_close > radius] <- NA
sim_close[sim_close == 0] <- NA
sim_close <- sim_close[apply(sim_close, 1, function(x) {
if (sum(is.na(x)) == length(x)) {
return(FALSE)
}
else {
return(TRUE)
}
}), ]
if (is.null(dim(sim_close))) {
formatted_data$Cluster <- NA
plot_clusters <- FALSE
}
else {
if (nrow(sim_close) == 0) {
formatted_data[formatted_data[[feature_colname]] %in%
cell_types_of_interest, "Cluster"] <- "Free_cell"
plot_clusters <- FALSE
message("There are no clusters detected in this image. All cells of interest are free cells.")
}
else {
sim_close <- sim_close[, apply(sim_close,
2, function(x) {
if (sum(is.na(x)) == length(x)) {
return(FALSE)
}
else {
return(TRUE)
}
})]
cells_in_cluster <- rownames(sim_close)
sim_close <- ifelse(is.na(sim_close), 1, 0)
print(sim_close)
if (nrow(sim_close) != 0 & ncol(sim_close) !=
0) {
h <- stats::hclust(stats::as.dist(sim_close),
method = "single")
local_clusters <- stats::cutree(h, h = 0.5)
formatted_data$Cluster <- as.character(local_clusters[match(formatted_data$Cell.ID,
names(local_clusters))])
}
else {
formatted_data$Cluster <- NA
}
summarised_data <- formatted_data %>% group_by(Cluster) %>%
summarise(n = n())
big_clusters <- summarised_data[summarised_data$n >
min_neighborhood_size, "Cluster"]$Cluster
print(big_clusters)
if (length(big_clusters) == 0) {
formatted_data[formatted_data[[feature_colname]] %in%
cell_types_of_interest, "Cluster"] <- "Free_cell"
plot_clusters <- FALSE
message("There are no clusters detected in this image. All cells of interest are free cells.")
}
else {
formatted_data[formatted_data$Cluster %in%
big_clusters, "size"] <- "larger"
cluster_ids <- unique(formatted_data[formatted_data$size ==
"larger", "Cluster"])
n_cluster <- length(cluster_ids)
n <- 1
for (cluster_id in cluster_ids) {
if (!is.na(cluster_id)) {
formatted_data[which(formatted_data$Cluster ==
cluster_id), "new_cluster"] <- n
n <- n + 1
}
}
formatted_data$Cluster <- formatted_data$new_cluster
formatted_data$Cluster <- as.character(formatted_data$Cluster)
formatted_data$new_cluster <- NULL
formatted_data$size <- NULL
}
}
}
}
else if (method == "dbscan") {
cell_cords <- formatted_data[, c("Cell.X.Position",
"Cell.Y.Position")]
db <- dbscan::dbscan(cell_cords, eps = radius, minPts = min_neighborhood_size)
formatted_data$Cluster <- factor(db$cluster + 1)
}
else if (method == "rphenograph") {
stop("This option is not available for this version yet! Check dev version for this function!")
}
else {
stop("Please select a valid clustering method, current options: dbscan")
}
}
cells_in_clusters <- formatted_data[stats::complete.cases(formatted_data),
]
cells_not_in_clusters <- formatted_data[!stats::complete.cases(formatted_data),
]
number_of_clusters <- length(unique(cells_in_clusters$Cluster))
if (plot_clusters) {
label_location <- vector()
for (Clusternumber in seq_len(number_of_clusters)) {
cells_in_Cluster <- cells_in_clusters[cells_in_clusters$Cluster ==
Clusternumber, ]
minX <- min(cells_in_Cluster$Cell.X.Position, na.rm = TRUE)
maxX <- max(cells_in_Cluster$Cell.X.Position, na.rm = TRUE)
minY <- min(cells_in_Cluster$Cell.Y.Position, na.rm = TRUE)
maxY <- max(cells_in_Cluster$Cell.Y.Position, na.rm = TRUE)
averageX <- (minX + maxX)/2
averageY <- (minY + maxY)/2
label_location <- rbind(label_location, c(Clusternumber,
averageX, averageY))
}
label_location <- as.data.frame(label_location)
colnames(label_location) <- c("Cluster", "Xpos", "Ypos")
cluster_colours <- dittoSeq::dittoColors()[seq_len(number_of_clusters)]
q <- ggplot(cells_in_clusters, aes(x = Cell.X.Position,
y = Cell.Y.Position))
q <- q + geom_point(aes(color = Cluster))
q <- q + geom_text(data = label_location, aes(x = Xpos,
y = Ypos, label = Cluster))
q <- q + scale_color_manual(values = cluster_colours)
if (dim(cells_not_in_clusters)[1] != 0) {
q <- q + geom_point(data = cells_not_in_clusters,
colour = "black")
}
q <- q + xlab("Cell.X.Position") + ylab("Cell.Y.Position") +
theme_bw() + theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(), legend.position = "none")
methods::show(q)
}
formatted_data_with_clusters <- formatted_data
formatted_data_with_clusters$Cluster <- paste0("Cluster_",
as.character(formatted_data_with_clusters$Cluster))
formatted_data_with_clusters$Cluster[formatted_data_with_clusters$Cluster ==
"Cluster_NA"] <- "Free_cell"
formatted_data_with_clusters$Cluster[formatted_data_with_clusters$Cluster ==
"Cluster_Free_cell"] <- "Free_cell"
colnames(formatted_data_with_clusters)[which(colnames(formatted_data_with_clusters) ==
"Cluster")] <- "Neighborhood"
if (is.null(SummarizedExperiment::colData(spe_object)$Cell.ID)) {
SummarizedExperiment::colData(spe_object)$Cell.ID <- rownames(SummarizedExperiment::colData(spe_object))
}
SummarizedExperiment::colData(spe_object) <- methods::as(merge(data.frame(SummarizedExperiment::colData(spe_object)),
formatted_data_with_clusters[, c("Cell.ID", "Neighborhood")],
by = "Cell.ID", all.x = TRUE), "DFrame")
return(spe_object)
}
#Identifying cell neighborhoods
clusters <- identify_neigh(A2_B4,
method = "hierarchical",
cell_types_of_interest = c("p53"),
feature_colname = "Cell.Type",
radius = 50,
min_neighborhood_size = 65)
#Identifying cell neighborhoods
clusters <- identify_neighborhoods(A2_B4,
method = "hierarchical",
cell_types_of_interest = c("p53"),
feature_colname = "Cell.Type",
radius = 100,
min_neighborhood_size = 20)
#Identifying cell neighborhoods
clusters <- identify_neighborhoods(A2_B4,
method = "hierarchical",
cell_types_of_interest = c("p53"),
feature_colname = "Cell.Type",
radius = 40,
min_neighborhood_size = 20)
#Identifying cell neighborhoods
clusters <- identify_neighborhoods(A2_B4,
method = "hierarchical",
cell_types_of_interest = c("p53"),
feature_colname = "Cell.Type",
radius = 50,
min_neighborhood_size = 20)
#Identifying cell neighborhoods
clusters <- identify_neighborhoods(A2_B4,
method = "hierarchical",
cell_types_of_interest = c("p53"),
feature_colname = "Cell.Type",
radius = 70,
min_neighborhood_size = 20)
#Identifying cell neighborhoods
clusters <- identify_neighborhoods(A2_B4,
method = "hierarchical",
cell_types_of_interest = c("p53"),
feature_colname = "Cell.Type",
radius = 80,
min_neighborhood_size = 20)
distances <- matrix(c(0, 1, 2, 1, 0, 3, 2, 3, 0), nrow = 3)
distances
distances[distances>2] <- NA
distances
#Identifying cell neighborhoods
debug(clusters <- identify_neighborhoods(A2_B4,
method = "hierarchical",
cell_types_of_interest = c("p53"),
feature_colname = "Cell.Type",
radius = 80,
min_neighborhood_size = 20))
#Identifying cell neighborhoods
debug(identify_neighborhoods(A2_B4,
method = "hierarchical",
cell_types_of_interest = c("p53"),
feature_colname = "Cell.Type",
radius = 60,
min_neighborhood_size = 20))
debug()
#Identifying cell neighborhoods
debug(fun=identify_neighborhoods(A2_B4,
method = "hierarchical",
cell_types_of_interest = c("p53"),
feature_colname = "Cell.Type",
radius = 60,
min_neighborhood_size = 20))
#Identifying cell neighborhoods
debug(fun=identify_neighborhoods(A2_B4,
method = "hierarchical",
cell_types_of_interest = c("p53"),
feature_colname = "Cell.Type",
radius = 60,
min_neighborhood_size = 20))
#Identifying cell neighborhoods
debug(fun=identify_neighborhoods(A2_B4,
method = "hierarchical",
cell_types_of_interest = c("p53"),
feature_colname = "Cell.Type",
radius = 100,
min_neighborhood_size = 20))
#Identifying cell neighborhoods
debug(fun=identify_neighborhoods(A2_B4,
method = "hierarchical",
cell_types_of_interest = c("p53"),
feature_colname = "Cell.Type",
radius = 30,
min_neighborhood_size = 20))
#Identifying cell neighborhoods
debug(fun=identify_neighborhoods(A2_B4,
method = "hierarchical",
cell_types_of_interest = c("p53"),
feature_colname = "Cell.Type",
radius = 30,
min_neighborhood_size = 20))
#Identifying cell neighborhoods
debug(fun=identify_neighborhoods(A2_B4,
method = "hierarchical",
cell_types_of_interest = c("p53"),
feature_colname = "Cell.Type",
radius = 30,
min_neighborhood_size = 20))
options(error = browser())
identify_neighborhoods(A2_B4,
+                                    method = "hierarchical",
identify_neighborhoods(A2_B4,method = "hierarchical",cell_types_of_interest = c("p53"),feature_colname = "Cell.Type",radius = 30,min_neighborhood_size = 20)
debug(identify_neighborhoods(A2_B4,method = "hierarchical",cell_types_of_interest = c("p53"),feature_colname = "Cell.Type",radius = 30,min_neighborhood_size = 20))
debug(identify_neighborhoods)
identify_neighborhoods(A2_B4,method = "hierarchical",cell_types_of_interest = c("p53"),feature_colname = "Cell.Type",radius = 30,min_neighborhood_size = 20)
identify_neighborhoods(A2_B4,method = "hierarchical",cell_types_of_interest = c("p53"),feature_colname = "Cell.Type",radius = 30,min_neighborhood_size = 20)
undebug()
